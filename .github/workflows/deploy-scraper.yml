name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: cs144-webapps-ryanrosario-sp25
  SERVICE: nutri-bruin-scraper
  REGION: us-central1
  REGISTRY: gcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
          
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci || npm install
        
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci || npm install
        
      - name: Run backend tests
        working-directory: ./backend
        run: npm test --passWithNoTests || true
        
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --passWithNoTests --watchAll=false || true
        
      - name: Run backend linter
        working-directory: ./backend
        run: npm run lint --if-present || true
        
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        
      - name: Build backend TypeScript
        working-directory: ./backend
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Configure Docker
        run: |
          gcloud auth configure-docker
          
      - name: Setup Node.js for builds
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Build Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
          echo "âœ… Frontend build completed"
          
      - name: Build WebAssembly Module
        working-directory: ./frontend/wasm
        run: |
          npm install
          npm run asbuild:release
          cp build/release.wasm ../build/formulae.wasm
          echo "âœ… WebAssembly module built"
          
      - name: Copy Frontend to Backend
        run: |
          mkdir -p backend/public
          cp -r frontend/build/* backend/public/
          echo "âœ… Frontend copied to backend/public"
          ls -la backend/public
          
      - name: Create Multi-Stage Dockerfile
        working-directory: ./backend
        run: |
          cat > Dockerfile << 'EOF'
          # Build stage
          FROM node:18-alpine AS builder
          
          WORKDIR /app
          
          # Copy package files
          COPY package*.json ./
          RUN npm ci
          
          # Copy source code
          COPY . .
          
          # Build TypeScript
          RUN npm run build
          
          # Production stage
          FROM node:18-alpine
          
          WORKDIR /app
          
          # Copy package files
          COPY package*.json ./
          RUN npm ci --only=production
          
          # Copy built application
          COPY --from=builder /app/dist ./dist
          
          # Copy public folder (frontend build)
          COPY public ./public
          
          # Expose port
          EXPOSE 8080
          
          # Start application
          CMD ["node", "dist/index.js"]
          EOF
          
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }} ./backend
          docker tag ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest
          
      - name: Push Docker Image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest
            
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE }} \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars NODE_ENV=production,FRONTEND_URL=https://nutri-bruin-scraper-228340739101.us-central1.run.app \
            --update-secrets "MONGODB_URI=mongodb-uri:latest,REDIS_HOST=redis-host:latest,REDIS_PORT=redis-port:latest,REDIS_USERNAME=redis-username:latest,REDIS_PASSWORD=redis-password:latest" \
            --service-account nutri-bruin-scraper@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
            --timeout 300 \
            --memory 1Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 10
            
      - name: Verify Deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "ðŸš€ Service deployed to: $SERVICE_URL"
          
          # Test API endpoint
          echo "Testing API health..."
          curl -f "$SERVICE_URL/api/health" || exit 1
          
          # Test frontend
          echo "Testing frontend..."
          curl -f "$SERVICE_URL" || exit 1
          
          echo "âœ… Deployment successful!"